
// This file will be auto-generated by Supabase CLI if you use it to generate types from your schema.
// For now, we'll define a basic structure.
// You should run `npx supabase gen types typescript --project-id your-project-id > src/types/supabase.ts`
// after setting up your tables in Supabase.

export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[]

export interface Database {
  public: {
    Tables: {
      users: {
        Row: {
          id: string // UUID
          created_at?: string
          name: string | null
          email: string | null
          role: "user" | "admin" | null
          avatar_url: string | null 
        }
        Insert: {
          id?: string 
          created_at?: string
          name?: string | null
          email?: string | null
          role?: "user" | "admin" | null
          avatar_url?: string | null
        }
        Update: {
          id?: string
          created_at?: string
          name?: string | null
          email?: string | null
          role?: "user" | "admin" | null
          avatar_url?: string | null
        }
        Relationships: []
      }
      projects: {
        Row: {
          id: string // UUID
          title: string
          subtitle: string
          ministry_id: string | null // We'll look this up in mock data for now
          state_id: string | null    // We'll look this up in mock data for now
          status: string // 'Ongoing' | 'Completed' | 'Planned' | 'On Hold'
          start_date: string // ISO date string
          expected_end_date: string | null // ISO date string
          actual_end_date: string | null // ISO date string
          description: string
          images: Json | null // Array of { url: string; alt: string; dataAiHint?: string }
          videos: Json | null // Array of Video type
          impact_stats: Json | null // Array of ImpactStat type (with iconName)
          budget: number | null
          expenditure: number | null
          tags: string[] | null // Array of text
          last_updated_at: string // ISO date string
          created_at: string // ISO date string
        }
        Insert: {
          id?: string
          title: string
          subtitle: string
          ministry_id?: string | null
          state_id?: string | null
          status: string
          start_date: string
          expected_end_date?: string | null
          actual_end_date?: string | null
          description: string
          images?: Json | null
          videos?: Json | null
          impact_stats?: Json | null
          budget?: number | null
          expenditure?: number | null
          tags?: string[] | null
          last_updated_at?: string
          created_at?: string
        }
        Update: {
          id?: string
          title?: string
          subtitle?: string
          ministry_id?: string | null
          state_id?: string | null
          status?: string
          start_date?: string
          expected_end_date?: string | null
          actual_end_date?: string | null
          description?: string
          images?: Json | null
          videos?: Json | null
          impact_stats?: Json | null
          budget?: number | null
          expenditure?: number | null
          tags?: string[] | null
          last_updated_at?: string
          created_at?: string
        }
        Relationships: []
      }
      feedback: {
        Row: {
          id: string // UUID
          project_id: string // FK to projects.id
          user_id: string | null // FK to users.id (optional for now)
          user_name: string
          comment: string
          rating: number | null
          sentiment_summary: string | null
          created_at: string // ISO date string
        }
        Insert: {
          id?: string
          project_id: string
          user_id?: string | null
          user_name: string
          comment: string
          rating?: number | null
          sentiment_summary?: string | null
          created_at?: string
        }
        Update: {
          id?: string
          project_id?: string
          user_id?: string | null
          user_name?: string
          comment?: string
          rating?: number | null
          sentiment_summary?: string | null
          created_at?: string
        }
        Relationships: [
          {
            foreignKeyName: "feedback_project_id_fkey"
            columns: ["project_id"]
            referencedRelation: "projects"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "feedback_user_id_fkey" // Assuming you have a users table
            columns: ["user_id"]
            referencedRelation: "users"
            referencedColumns: ["id"]
          }
        ]
      }
    }
    Views: {
      [_ in never]: never
    }
    Functions: {
      [_ in never]: never
    }
    Enums: {
      [_ in never]: never
    }
    CompositeTypes: {
      [_ in never]: never
    }
  }
}

import type { User as AppUser } from './index';
export type UserRow = Database['public']['Tables']['users']['Row'];

export function mapUserRowToAppUser(row: UserRow): AppUser {
  return {
    id: row.id,
    name: row.name,
    email: row.email,
    role: row.role,
    avatarUrl: row.avatar_url, 
    created_at: row.created_at,
  };
}
