
// This file will be auto-generated by Supabase CLI if you use it to generate types from your schema.
// For now, we'll define a basic structure.
// You should run `npx supabase gen types typescript --project-id your-project-id > src/types/supabase.ts`
// after setting up your tables in Supabase.

export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[]

export interface Database {
  public: {
    Tables: {
      users: {
        Row: {
          id: string // UUID
          created_at?: string
          name: string | null
          email: string | null
          role: "user" | "admin" | null
          avatar_url: string | null 
        }
        Insert: {
          id?: string 
          created_at?: string
          name?: string | null
          email?: string | null
          role?: "user" | "admin" | null
          avatar_url?: string | null
        }
        Update: {
          id?: string
          created_at?: string
          name?: string | null
          email?: string | null
          role?: "user" | "admin" | null
          avatar_url?: string | null
        }
        Relationships: []
      }
      projects: {
        Row: {
          id: string // UUID
          title: string
          subtitle: string
          ministry_id: string | null 
          state_id: string | null    
          status: string 
          start_date: string 
          expected_end_date: string | null 
          actual_end_date: string | null 
          description: string
          images: Json | null 
          videos: Json | null 
          impact_stats: Json | null 
          budget: number | null
          expenditure: number | null
          tags: string[] | null 
          last_updated_at: string 
          created_at: string 
        }
        Insert: {
          id?: string
          title: string
          subtitle: string
          ministry_id?: string | null
          state_id?: string | null
          status: string
          start_date: string
          expected_end_date?: string | null
          actual_end_date?: string | null
          description: string
          images?: Json | null
          videos?: Json | null
          impact_stats?: Json | null
          budget?: number | null
          expenditure?: number | null
          tags?: string[] | null
          last_updated_at?: string
          created_at?: string
        }
        Update: {
          id?: string
          title?: string
          subtitle?: string
          ministry_id?: string | null
          state_id?: string | null
          status?: string
          start_date?: string
          expected_end_date?: string | null
          actual_end_date?: string | null
          description?: string
          images?: Json | null
          videos?: Json | null
          impact_stats?: Json | null
          budget?: number | null
          expenditure?: number | null
          tags?: string[] | null
          last_updated_at?: string
          created_at?: string
        }
        Relationships: []
      }
      feedback: {
        Row: {
          id: string 
          project_id: string 
          user_id: string | null 
          user_name: string
          comment: string
          rating: number | null
          sentiment_summary: string | null
          created_at: string 
        }
        Insert: {
          id?: string
          project_id: string
          user_id?: string | null
          user_name: string
          comment: string
          rating?: number | null
          sentiment_summary?: string | null
          created_at?: string
        }
        Update: {
          id?: string
          project_id?: string
          user_id?: string | null
          user_name?: string
          comment?: string
          rating?: number | null
          sentiment_summary?: string | null
          created_at?: string
        }
        Relationships: [
          {
            foreignKeyName: "feedback_project_id_fkey"
            columns: ["project_id"]
            referencedRelation: "projects"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "feedback_user_id_fkey" 
            columns: ["user_id"]
            referencedRelation: "users"
            referencedColumns: ["id"]
          }
        ]
      }
      news_articles: { 
        Row: {
          id: string
          slug: string
          title: string
          summary: string
          image_url: string | null
          data_ai_hint: string | null
          category: string
          published_date: string // timestamptz
          content: string
          created_at: string // timestamptz
          updated_at: string // timestamptz
        }
        Insert: {
          id?: string
          slug: string
          title: string
          summary: string
          image_url?: string | null
          data_ai_hint?: string | null
          category: string
          published_date: string
          content: string
          created_at?: string
          updated_at?: string
        }
        Update: {
          id?: string
          slug?: string
          title?: string
          summary?: string
          image_url?: string | null
          data_ai_hint?: string | null
          category?: string
          published_date?: string
          content?: string
          created_at?: string
          updated_at?: string
        }
        Relationships: []
      }
      services: { 
        Row: {
          id: string
          slug: string
          title: string
          summary: string
          icon_name: string | null
          link: string | null
          category: string
          image_url: string | null
          data_ai_hint: string | null
          created_at: string 
          updated_at: string 
        }
        Insert: {
          id?: string
          slug: string
          title: string
          summary: string
          icon_name?: string | null
          link?: string | null
          category: string
          image_url?: string | null
          data_ai_hint?: string | null
          created_at?: string
          updated_at?: string
        }
        Update: {
          id?: string
          slug?: string
          title?: string
          summary?: string
          icon_name?: string | null
          link?: string | null
          category?: string
          image_url?: string | null
          data_ai_hint?: string | null
          created_at?: string
          updated_at?: string
        }
        Relationships: []
      }
      videos: { 
        Row: {
          id: string
          title: string
          url: string
          thumbnail_url: string | null
          data_ai_hint: string | null
          description: string | null
          created_at: string 
          updated_at: string 
        }
        Insert: {
          id?: string
          title: string
          url: string
          thumbnail_url?: string | null
          data_ai_hint?: string | null
          description?: string | null
          created_at?: string
          updated_at?: string
        }
        Update: {
          id?: string
          title?: string
          url?: string
          thumbnail_url?: string | null
          data_ai_hint?: string | null
          description?: string | null
          created_at?: string
          updated_at?: string
        }
        Relationships: []
      }
      site_settings: {
        Row: {
          id: string
          siteName: string | null
          maintenanceMode: boolean
          contactEmail: string | null
          footerMessage: string | null
          updatedAt: string 
        }
        Insert: {
          id: string
          siteName?: string | null
          maintenanceMode?: boolean
          contactEmail?: string | null
          footerMessage?: string | null
          updatedAt?: string
        }
        Update: {
          id?: string
          siteName?: string | null
          maintenanceMode?: boolean
          contactEmail?: string | null
          footerMessage?: string | null
          updatedAt?: string
        }
        Relationships: []
      }
    }
    Views: {
      [_ in never]: never
    }
    Functions: {
      [_ in never]: never
    }
    Enums: {
      [_ in never]: never
    }
    CompositeTypes: {
      [_ in never]: never
    }
  }
}

import type { User as AppUser } from './index';
export type UserRow = Database['public']['Tables']['users']['Row'];

export function mapUserRowToAppUser(row: UserRow): AppUser {
  return {
    id: row.id,
    name: row.name,
    email: row.email,
    role: row.role,
    avatarUrl: row.avatar_url, 
    created_at: row.created_at,
  };
}

    