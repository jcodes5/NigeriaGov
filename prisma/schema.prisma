
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL") // Ensure this points to your Supabase DB URL
  directUrl = env("DIRECT_URL") // Ensure this points to your Supabase Direct DB URL (for Prisma Migrate)
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          String    @id @default(uuid()) // Supabase auth.users.id is UUID
  created_at  DateTime? @default(now()) @map("created_at")
  name        String?
  email       String?   @unique // Should match Supabase auth.users.email
  role        String?   @default("user") // e.g., "user", "admin"
  avatar_url  String?   @map("avatar_url")
  feedback    Feedback[] @relation("UserFeedback")

  @@map("users") // Maps to the 'users' table in your public schema
}

model Project {
  id                String    @id @default(uuid())
  title             String    @unique // Ensuring project titles are unique
  subtitle          String
  ministry_id       String?   @map("ministry_id") // Placeholder, will be string ID from mock/future table
  state_id          String?   @map("state_id")    // Placeholder, will be string ID from mock/future table
  status            String    // e.g., "Ongoing", "Completed", "Planned"
  start_date        DateTime  @map("start_date")
  expected_end_date DateTime? @map("expected_end_date")
  actual_end_date   DateTime? @map("actual_end_date")
  description       String    @db.Text
  images            Json?     // Can store array of { url: string; alt: string }
  videos            Json?     // Can store array of { title: string; url: string; thumbnailUrl?: string }
  impact_stats      Json?     // Can store array of { label: string; value: string; icon?: string }
  budget            Float?    // Using Float for currency
  expenditure       Float?
  tags              String[]  @default([])
  last_updated_at   DateTime  @updatedAt @map("last_updated_at")
  created_at        DateTime  @default(now()) @map("created_at")
  
  feedback_list     Feedback[] @relation("ProjectFeedback")


  @@map("projects") // Explicitly maps to the "projects" table
}

model Feedback {
  id                String    @id @default(uuid())
  project_id        String    @map("project_id")
  user_id           String?   @map("user_id") // Nullable if feedback can be anonymous or user is deleted
  user_name         String    @map("user_name") // Store name at time of feedback
  comment           String    @db.Text
  rating            Int?      // e.g., 1-5 stars
  sentiment_summary String?   @map("sentiment_summary") // Optional sentiment analysis result
  created_at        DateTime  @default(now()) @map("created_at")
  
  project           Project   @relation("ProjectFeedback", fields: [project_id], references: [id], onDelete: Cascade)
  user              User?     @relation("UserFeedback", fields: [user_id], references: [id], onDelete: SetNull)

  @@index([project_id])
  @@index([user_id])
  @@map("feedback")
}

model NewsArticle {
  id            String    @id @default(uuid())
  slug          String    @unique // URL-friendly identifier
  title         String
  summary       String    @db.Text
  imageUrl      String?   @map("image_url")
  dataAiHint    String?   @map("data_ai_hint")
  category      String
  publishedDate DateTime  @map("published_date")
  content       String    @db.Text
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  @@map("news_articles")
}

model Service {
  id           String   @id @default(uuid())
  slug         String   @unique
  title        String
  summary      String   @db.Text
  iconName     String?  @map("icon_name") 
  link         String?  
  category     String
  imageUrl     String?  @map("image_url")
  dataAiHint   String?  @map("data_ai_hint")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("services")
}

model Video {
  id            String    @id @default(uuid())
  title         String
  url           String    
  thumbnailUrl  String?   @map("thumbnail_url")
  dataAiHint    String?   @map("data_ai_hint")
  description   String?   @db.Text
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  @@map("videos")
}

model SiteSetting {
  id              String    @id @default("global_settings")
  siteName        String?   @map("siteName")
  maintenanceMode Boolean   @default(false) @map("maintenanceMode")
  contactEmail    String?   @map("contactEmail")
  footerMessage   String?   @map("footerMessage")
  updatedAt       DateTime  @updatedAt

  @@map("site_settings")
}

    