generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id                String     @id @default(uuid())
  title             String
  subtitle          String
  ministry_id       String?
  state_id          String?
  status            String
  start_date        DateTime   @map("start_date")
  expected_end_date DateTime?  @map("expected_end_date")
  actual_end_date   DateTime?  @map("actual_end_date")
  description       String     @db.Text
  images            Json?
  videos            Json?
  impact_stats      Json?
  budget            Float?
  expenditure       Float?
  tags              String[]   @default([])
  last_updated_at   DateTime   @updatedAt @map("last_updated_at")
  created_at        DateTime   @default(now()) @map("created_at")
  feedback_list     Feedback[] @relation("ProjectFeedback")

  @@map("projects")
}

model Feedback {
  id                String    @id @default(uuid())
  project_id        String
  user_id           String?
  user_name         String
  comment           String    @db.Text
  rating            Int?
  sentiment_summary String?
  created_at        DateTime  @default(now()) @map("created_at")
  project           Project   @relation("ProjectFeedback", fields: [project_id], references: [id], onDelete: Cascade)
  user              User?     @relation("UserFeedback", fields: [user_id], references: [id], onDelete: SetNull)

  @@map("feedback")
}

model NewsArticle {
  id            String   @id @default(uuid())
  slug          String   @unique
  title         String
  summary       String   @db.Text
  imageUrl      String?  @map("image_url")
  dataAiHint    String?  @map("data_ai_hint")
  category      String
  publishedDate DateTime @map("published_date")
  content       String   @db.Text
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  @@map("news_articles")
}

model Service {
  id           String   @id @default(uuid())
  slug         String   @unique
  title        String
  summary      String   @db.Text
  iconName     String?  @map("icon_name")
  link         String?
  category     String
  imageUrl     String?  @map("image_url")
  dataAiHint   String?  @map("data_ai_hint")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("services")
}

model Video {
  id            String   @id @default(uuid())
  title         String
  url           String
  thumbnailUrl  String?  @map("thumbnail_url")
  dataAiHint    String?  @map("data_ai_hint")
  description   String?  @db.Text
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  @@map("videos")
}

model SiteSetting {
  id              String    @id @default("global_settings")
  siteName        String?   @map("site_name")
  maintenanceMode Boolean   @default(false) @map("maintenance_mode")
  contactEmail    String?   @map("contact_email")
  footerMessage   String?   @db.Text @map("footer_message")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  @@map("site_settings")
}


// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid()) // Changed from Uuid to cuid for NextAuth default
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?   // Replaces avatar_url for NextAuth compatibility
  role          String?   @default("user") // 'user' or 'admin', kept from original
  
  created_at    DateTime? @default(now()) @map("created_at") // Kept from original
  updated_at    DateTime? @updatedAt @map("updated_at") // Kept from original

  accounts      Account[]
  sessions      Session[]
  feedback_list Feedback[] @relation("UserFeedback") // Kept from original

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
