datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          String    @id @default(uuid())
  name        String?
  email       String?   @unique
  role        String?   @default("user") // 'user' or 'admin'
  avatar_url  String? // URL for user's avatar
  created_at  DateTime? @default(now())
  updated_at  DateTime? @updatedAt
  feedback    Feedback[] @relation("UserFeedback")

  @@map("users")
}


model Project {
  id                String    @id @default(uuid())
  title             String    @unique // Added unique constraint
  subtitle          String
  ministry_id       String?
  state_id          String?
  status            String    // e.g., 'Ongoing', 'Completed', 'Planned'
  start_date        DateTime  @map("start_date")
  expected_end_date DateTime? @map("expected_end_date")
  actual_end_date   DateTime? @map("actual_end_date")
  description       String    @db.Text
  images            Json?     // Store as JSON array of objects: { url: string; alt: string; dataAiHint?: string }
  videos            Json?     // Store as JSON array of objects: { id: string; title: string; url: string; thumbnailUrl?: string; description?: string; dataAiHint?: string }
  impact_stats      Json?     // Store as JSON array of objects: { label: string; value: string; iconName?: string }
  budget            Float?
  expenditure       Float?
  tags              String[]  @default([])
  last_updated_at   DateTime  @updatedAt @map("last_updated_at")
  created_at        DateTime  @default(now()) @map("created_at")

  feedback_list     Feedback[] @relation("ProjectFeedback")

  @@map("projects")
}

model Feedback {
  id                String    @id @default(uuid())
  project_id        String
  user_id           String?   // Nullable if feedback can be anonymous or user deleted
  user_name         String    // Name provided at time of feedback
  comment           String    @db.Text
  rating            Int?      // Optional rating, e.g., 1-5
  sentiment_summary String?   // Optional AI-generated sentiment summary
  created_at        DateTime  @default(now()) @map("created_at")

  project           Project   @relation("ProjectFeedback", fields: [project_id], references: [id], onDelete: Cascade)
  user              User?     @relation("UserFeedback", fields: [user_id], references: [id], onDelete: SetNull) // SetNull if user is deleted

  @@index([project_id])
  @@index([user_id])
  @@map("feedback")
}

model NewsArticle {
  id            String    @id @default(uuid())
  slug          String    @unique
  title         String
  summary       String    @db.Text
  imageUrl      String?   @map("image_url")
  dataAiHint    String?   @map("data_ai_hint")
  category      String
  publishedDate DateTime  @map("published_date")
  content       String    @db.Text
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  @@map("news_articles")
}

model Service {
  id           String   @id @default(uuid())
  slug         String   @unique
  title        String
  summary      String   @db.Text
  iconName     String?  @map("icon_name")
  link         String?
  category     String
  imageUrl     String?  @map("image_url")
  dataAiHint   String?  @map("data_ai_hint")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("services")
}

model Video {
  id            String    @id @default(uuid())
  title         String
  url           String
  thumbnailUrl  String?   @map("thumbnail_url")
  dataAiHint    String?   @map("data_ai_hint")
  description   String?   @db.Text
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  @@map("videos")
}
